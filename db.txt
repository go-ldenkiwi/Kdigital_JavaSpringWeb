DROP DATABASE springProject;
CREATE DATABASE springProject;
CREATE USER 'user'@'localhost' IDENTIFIED WITH mysql_native_password BY '123123';
GRANT SELECT, INSERT , UPDATE, DELETE   on springProject.* to 'user'@'localhost';

use springProject;

CREATE TABLE USER(
	userId VARCHAR(255) NOT NULL,
	userNo INT AUTO_INCREMENT,
	nickname VARCHAR(255) NOT NULL,
	pw  VARCHAR(255) NOT NULL,
	username VARCHAR(255) NOT NULL,
	email VARCHAR(255) NOT NULL,
	information VARCHAR(255),
	signup DATETIME DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT PRIMARY KEY(userNo), 
	CONSTRAINT UNIQUE(nickname),
	CONSTRAINT UNIQUE(userId)
);

CREATE TABLE MAIN_BOARD(
	boardNo INT AUTO_INCREMENT,
	contents VARCHAR(255) DEFAULT '',
	postTime DATETIME DEFAULT CURRENT_TIMESTAMP(),
	userNo INT NOT NULL,
	category VARCHAR(255) NOT NULL,
	mapConfirm INT, 
	boardReport INT NOT NULL DEFAULT 0 ,
	PRIMARY KEY(boardNo),
	FOREIGN KEY(userNo) REFERENCES USER(userNo)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE MAIN_BOARD_IMG(
	boardImgNo INT AUTO_INCREMENT,
	boardNo INT NOT NULL,
	imgPath VARCHAR(255) NOT NULL,
	PRIMARY KEY(boardImgNo),
	FOREIGN KEY(boardNo) REFERENCES MAIN_BOARD(boardNo)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE MAIN_BOARD_REPLY(
	replyNo INT AUTO_INCREMENT,
	contents VARCHAR(255) DEFAULT '',
	postTime DATETIME DEFAULT CURRENT_TIMESTAMP(),
	
	boardNo INT NOT NULL,
	userNo INT NOT NULL,
	
	PRIMARY KEY(replyNo),
	FOREIGN KEY(userNo) REFERENCES USER(userNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY(boardNo) REFERENCES MAIN_BOARD(boardNo)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE MAIN_BOARD_PREFER(
	boardPreferNo INT AUTO_INCREMENT,
	boardNo INT NOT NULL,
	prefer BOOLEAN,
	userNo INT NOT NULL,
	PRIMARY KEY (boardPreferNo),
	FOREIGN KEY (userNo) REFERENCES USER(userNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (boardNo) REFERENCES MAIN_BOARD(boardNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	UNIQUE KEY (boardNo,userNo)
);

CREATE TABLE TAG(
	tagNo INT AUTO_INCREMENT,
	tagContent VARCHAR(255) NOT NULL,
	PRIMARY KEY(tagNo)
);

CREATE TABLE TAG_POST_MAPPING(
	tagNo INT NOT NULL,
	boardNo INT NOT NULL,
	FOREIGN KEY(boardNo) REFERENCES MAIN_BOARD(boardNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY(tagNo) REFERENCES TAG(tagNo)
);

CREATE TABLE MAP_FOOD(
	mapId INT NOT NULL,
	PRIMARY KEY(mapId)
);

CREATE TABLE MAP_FOOD_MAPPING(
	boardNo INT NOT NULL,
	mapId INT NOT NULL,
	FOREIGN KEY(boardNo) REFERENCES MAIN_BOARD(boardNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY(mapId) REFERENCES MAP_FOOD(mapId)
);

CREATE TABLE MAP_ETC(
	mapId INT AUTO_INCREMENT,
	boardNo INT NOT NULL,
	latitude VARCHAR(255) NOT NULL,
	longitude VARCHAR(255) NOT NULL,
	category VARCHAR(255) NOT NULL,
	PRIMARY KEY(mapId),
	FOREIGN KEY(boardNo) REFERENCES MAIN_BOARD(boardNo)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE GROOP(
	groupNo INT AUTO_INCREMENT PRIMARY KEY,
	groupName VARCHAR(255) NOT NULL,
	groupDesc VARCHAR(255),

	userNo INT NOT NULL,
	
	UNIQUE (groupName),
	FOREIGN KEY (userNo) REFERENCES USER(userNo)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE GROOP_BOARD(
	groupBoardNo INT AUTO_INCREMENT PRIMARY KEY,

	groupNo INT NOT NULL, 
	userNo INT NOT NULL,
  
	groupBoardTitle VARCHAR(255) NOT NULL,
	groupBoardContent VARCHAR(255),
	groupBoardTime DATETIME DEFAULT CURRENT_TIMESTAMP(),
	groupBoardViews INT NOT NULL DEFAULT 0,

	FOREIGN KEY (groupNo) REFERENCES GROOP(groupNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (userNo) REFERENCES USER(userNo)
	ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE TABLE GROOP_REPLY(
	replyNo INT AUTO_INCREMENT PRIMARY KEY,
	
	groupBoardNo INT NOT NULL, 
	userNo INT NOT NULL,
	parentNo INT,

	replyContent VARCHAR(255),
	replyTime DATETIME DEFAULT CURRENT_TIMESTAMP(),
	
	FOREIGN KEY (ParentNo) REFERENCES GROOP_REPLY(replyNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (groupBoardNo) REFERENCES GROOP_BOARD(groupBoardNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (userNo) REFERENCES USER(userNo)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE GROOP_REGISTER(
	registerNo INT AUTO_INCREMENT PRIMARY KEY,

	groupNo INT NOT NULL, 
	userNo INT NOT NULL,
	
	isAccepted BOOLEAN DEFAULT NULL,
	
	FOREIGN KEY (groupNo) REFERENCES GROOP(groupNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (userNo) REFERENCES USER(userNo)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE GROOP_INVITE(
	inviteNo INT AUTO_INCREMENT PRIMARY KEY,

	groupNo INT NOT NULL, 
	userNo INT NOT NULL,
	
	isAccepted BOOLEAN DEFAULT NULL,

	FOREIGN KEY (groupNo) REFERENCES GROOP(groupNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (userNo) REFERENCES USER(userNo)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE GROOP_BOARD_COMMENT(
	CommentNo INT AUTO_INCREMENT PRIMARY KEY,
	
	groupBoardNo INT NOT NULL, 
	userId VARCHAR(255) NOT NULL,
	ParentCommentNo INT,

	CommentContent VARCHAR(255),
	CommentTime DATETIME DEFAULT CURRENT_TIMESTAMP(),
	
	FOREIGN KEY (ParentCommentNo) REFERENCES GROOP_BOARD_COMMENT(CommentNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (groupBoardNo) REFERENCES GROOP_BOARD(groupBoardNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (userId) REFERENCES USER(userId)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE GROOP_REGISTER_Q(
	URQNo INT AUTO_INCREMENT PRIMARY KEY,

	groupName VARCHAR(255) NOT NULL,
	userId VARCHAR(255) NOT NULL,
	
	isAccepted BOOLEAN DEFAULT NULL,
	
	FOREIGN KEY (groupName) REFERENCES GROOP(groupName)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (userId) REFERENCES USER(userId)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE GROOP_INVITE_Q(
	UIQNo INT AUTO_INCREMENT PRIMARY KEY,

	groupName VARCHAR(255) NOT NULL,
	userId VARCHAR(255) NOT NULL,
	
	isAccepted BOOLEAN DEFAULT NULL,

	FOREIGN KEY (groupName) REFERENCES GROOP(groupName)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (userId) REFERENCES USER(userId)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE USER_REGISTERED_GROOP(
	urgNo INT AUTO_INCREMENT PRIMARY KEY,

	groupNo INT NOT NULL, 
	userNo INT NOT NULL,
	
	FOREIGN KEY (groupNo) REFERENCES GROOP(groupNo)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (userNo) REFERENCES USER(userNo)
	ON UPDATE CASCADE ON DELETE CASCADE
);

